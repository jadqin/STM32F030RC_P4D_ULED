#define DMA_BUFFER_SIZE     8   
int16_t adc_dma_tab[8] = { 0 };

void user_adc_init(void)  
{  
    adc_gpio_conf();  
    adc_config();              
    adc_dma_init();              
}

void adc_gpio_conf(void)
{
	GPIO_InitTypeDef GPIO_Initstructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, (FunctionalState)ENABLE);
	
	GPIO_Initstructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 \
															| GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_Initstructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_Initstructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_Initstructure);

}

void adc_config(void)
{
	ADC_InitTypeDef ADC_Initstructure;
	
	ADC_DeInit(ADC1);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, (FunctionalState)ENABLE);
	
	ADC_StructInit(&ADC_Initstructure);
	
	ADC_Initstructure.ADC_ContinuousConvMode = (FunctionalState)ENABLE;	
	ADC_Initstructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_Initstructure.ADC_ExternalTrigConv = ADC_ExternalTrigConvEdge_None;
	ADC_Initstructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_Initstructure.ADC_ScanDirection = ADC_ScanDirection_Upward;
	ADC_Init(ADC1, &ADC_Initstructure);
	
	ADC_OverrunModeCmd(ADC1, (FunctionalState)ENABLE);
	ADC_ChannelConfig(ADC1, ADC_Channel_0 | ADC_Channel_1 | ADC_Channel_2 | ADC_Channel_3 \
												| ADC_Channel_4 | ADC_Channel_5 | ADC_Channel_6 | ADC_Channel_7, ADC_SampleTime_55_5Cycles);
	
	ADC_GetCalibrationFactor(ADC1);
	ADC_DMARequestModeConfig(ADC1, ADC_DMAMode_Circular);
  ADC_DMACmd(ADC1, (FunctionalState)ENABLE);                            
	ADC_Cmd(ADC1, (FunctionalState)ENABLE);
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_ADRDY));         
  ADC_StartOfConversion(ADC1);  	

}

void adc_dma_init(void)  
{  
    DMA_InitTypeDef dma_init_structure;  
  
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, (FunctionalState)ENABLE);              //使能DMA时钟  
  
    DMA_DeInit(DMA1_Channel1);                                      //复位DMA1_channel1  
  
    dma_init_structure.DMA_BufferSize = DMA_BUFFER_SIZE;            //DMA缓存数组大小设置  
    dma_init_structure.DMA_DIR = DMA_DIR_PeripheralSRC;             //DMA方向：外设作为数据源  
    dma_init_structure.DMA_M2M = DISABLE;                           //内存到内存禁用  
    dma_init_structure.DMA_MemoryBaseAddr = (uint32_t)&adc_dma_tab[0];//缓存数据数组起始地址  
    dma_init_structure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;//数据大小设置为Halfword  
    dma_init_structure.DMA_MemoryInc = DMA_MemoryInc_Enable;        //内存地址递增  
    dma_init_structure.DMA_Mode = DMA_Mode_Circular;                //DMA循环模式，即完成后重新开始覆盖  
    dma_init_structure.DMA_PeripheralBaseAddr = (uint32_t) &(ADC1->DR);//取值的外设地址  
    dma_init_structure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;//外设取值大小设置为Halfword  
    dma_init_structure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;//外设地址递增禁用  
    dma_init_structure.DMA_Priority = DMA_Priority_High;             //DMA优先级设置为高  
    DMA_Init(DMA1_Channel1, &dma_init_structure);  
	
    DMA_Cmd(DMA1_Channel1, (FunctionalState)ENABLE);                                  //使能DMA1  
}  
  
void GetAdcValue(uint16_t *val)
{
	uint8_t i;
	while((DMA_GetFlagStatus(DMA1_FLAG_TC1)) == RESET );     
	/* Clear DMA TC flag */
	DMA_ClearFlag(DMA1_FLAG_TC1);
	for(i=0; i<8; i++)
	{
		*val = adc_dma_tab[i];
		val++;
	}
}
